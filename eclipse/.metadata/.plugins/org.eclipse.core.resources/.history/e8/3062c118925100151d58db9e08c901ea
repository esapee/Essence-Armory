package essenceMod.items.baubles;

import java.util.ArrayList;
import java.util.List;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.passive.EntityAmbientCreature;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.ChatComponentText;
import net.minecraft.world.World;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.entity.living.LivingAttackEvent;
import baubles.api.BaubleType;
import baubles.common.lib.PlayerHandler;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;

public class ItemCleaveBelt extends ItemBauble
{
	int level;
	ArrayList[] attacked;
	
	public ItemCleaveBelt()
	{
		this(0);
	}
	
	public ItemCleaveBelt(int level)
	{
		super();
		this.level = level;
		MinecraftForge.EVENT_BUS.register(this);
		attacked = new ArrayList[5];
		for (int i = 0; i < 5; i++)
		{
			attacked[i] = new ArrayList();
		}
	}
	
	@Override
	public void onCreated(ItemStack item, World world, EntityPlayer player)
	{
		super.onCreated(item, world, player);
		item.stackTagCompound.setInteger("Level", level);
		attacked = new ArrayList[5];
		for (int i = 0; i < 5; i++)
		{
			attacked[i] = new ArrayList();
		}
	}
	
	public static int getLevel(ItemStack item)
	{
		return item.stackTagCompound.getInteger("Level");
	}
	
	@Override
	public BaubleType getBaubleType(ItemStack itemstack)
	{
		return BaubleType.BELT;
	}
	
	@Override
	public void addInformation(ItemStack item, EntityPlayer player, List list, boolean bool)
	{
		if (!item.hasTagCompound()) onCreated(item, player.worldObj, player);
		if (item.stackTagCompound.hasKey("Level"))
		{
			int level = item.stackTagCompound.getInteger("Level");
			list.add("Level: " + item.stackTagCompound.getInteger("Level"));
			if (level != 0) list.add("Attacks deal damage to all enemies within " + level + ((level == 1) ? " block" : " blocks") + ", decreasing based on distance");
		}
	}
	
	@Override
	public void onWornTick(ItemStack item, EntityLivingBase player)
	{
		attacked = new ArrayList[5];
		for (int i = 0; i < 5; i++) attacked[i] = new ArrayList();
	}

	@SubscribeEvent
	public void onLivingAttack(LivingAttackEvent event)
	{
		EntityLivingBase target = event.entityLiving;
		World world = target.worldObj;
		if (event.source.getEntity() instanceof EntityPlayer)
		{
			EntityPlayer attacker = (EntityPlayer) event.source.getEntity();
			ItemStack belt = PlayerHandler.getPlayerBaubles(attacker).getStackInSlot(3);
			if (belt != null && belt.getItem() instanceof ItemCleaveBelt)
			{
				int level = ItemCleaveBelt.getLevel(belt);
				if (level == 0) return;
				for (int i = 1; i <= level; i++)
				{
					attacked[i-1].add(target);
					attacked[i-1].add(attacker);
					AxisAlignedBB axis = AxisAlignedBB.getBoundingBox(target.posX - i, target.posY - 1, target.posZ - i, target.posX + i, target.posY + 1, target.posZ + i);
					List list;
					if (target instanceof EntityMob)
					{
						list = world.getEntitiesWithinAABB(EntityMob.class, axis);
						list.removeAll(attacked[i-1]);
					}
					else if (target instanceof EntityAmbientCreature)
					{
						list = world.getEntitiesWithinAABB(EntityAmbientCreature.class, axis);
						list.removeAll(attacked[i-1]);
					}
					else if (target instanceof EntityPlayer)
					{
						list = world.getEntitiesWithinAABB(EntityPlayer.class, axis);
						list.removeAll(attacked[i-1]);
					}
					else continue;
					for (Object obj : list)
					{
						EntityLivingBase entity = (EntityLivingBase) obj;
						if (attacked[i-1].contains(entity)) continue;
						else
						{
							attacked[i-1].add(entity);
							entity.attackEntityFrom(event.source, event.ammount * 0.2F);
						}
					}
				}
			}
		}
	}
}
