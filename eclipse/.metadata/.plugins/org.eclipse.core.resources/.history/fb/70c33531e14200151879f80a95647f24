package essenceMod.items;

import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemArmor;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.ChatComponentText;
import net.minecraft.util.DamageSource;
import net.minecraft.world.World;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.entity.living.LivingEvent.LivingUpdateEvent;
import net.minecraftforge.event.entity.living.LivingHurtEvent;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import essenceMod.help.Reference;
import essenceMod.init.ModArmory;
import essenceMod.tabs.ModTabs;

public class ItemModArmor extends ItemArmor implements IModItem
{
	int level;
	boolean invisible;
	int resistance;
	int thorns;
	int absorption;
	int protection;
	int fireProtection;
	int blastProtection;
	int projectileProtection;
	int witherProtection;
	int magicProtection;
	int healthBoost;

	int absorptionDelay;
	float absorptionRemaining;

	public ItemModArmor(ArmorMaterial material, int ArmorType, String name)
	{
		super(material, 0, ArmorType);
		setUnlocalizedName(name);
		setTextureName(Reference.MODID + ":" + getUnlocalizedName().substring(5));
		setCreativeTab(ModTabs.tabEssence);
		setMaxDamage(0);
		MinecraftForge.EVENT_BUS.register(this);

		level = resistance = thorns = absorption = protection = fireProtection = blastProtection = projectileProtection = witherProtection = magicProtection = healthBoost = 0;
		invisible = false;
		
		level = 2;
		absorption = 2;
	}

	public ItemModArmor(ArmorMaterial material, int ArmorType, String name, String[] upgrades)
	{
		this(material, ArmorType, name);

		level = upgrades.length;
		for (String str : upgrades)
		{
			if (str.equals("Resistance")) resistance++;
			else if (str.equals("Thorns")) thorns++;
			else if (str.equals("Absorption")) absorption++;
			else if (str.equals("Protection")) protection++;
			else if (str.equals("Fire Protection")) fireProtection++;
			else if (str.equals("BlastProtection")) blastProtection++;
			else if (str.equals("Projectile Protection")) projectileProtection++;
			else if (str.equals("Wither Protection")) witherProtection++;
			else if (str.equals("Magic Protection")) magicProtection++;
			else if (str.equals("Health Boost")) healthBoost++;
		}
	}

	@Override
	public void onCreated(ItemStack item, World world, EntityPlayer player)
	{
		if (!item.hasTagCompound()) item.setTagCompound(new NBTTagCompound());
		item.stackTagCompound.setInteger("Level", level);
		item.stackTagCompound.setInteger("Resistance", resistance);
		item.stackTagCompound.setInteger("Thorns", thorns);
		item.stackTagCompound.setInteger("Absorption", absorption);
		item.stackTagCompound.setInteger("Protection", protection);
		item.stackTagCompound.setInteger("Fire Protection", fireProtection);
		item.stackTagCompound.setInteger("Blast Protection", blastProtection);
		item.stackTagCompound.setInteger("Projectile Protection", projectileProtection);
		item.stackTagCompound.setInteger("Wither Protection", witherProtection);
		item.stackTagCompound.setInteger("Magic Protection", magicProtection);
		item.stackTagCompound.setInteger("Health Boost", healthBoost);
		item.stackTagCompound.setInteger("Absorption Delay", 0);
	}

	@Override
	public void onArmorTick(World world, EntityPlayer player, ItemStack item)
	{
		if (!item.hasTagCompound()) onCreated(item, world, player);

		if (item.getItem() instanceof ItemModArmor)
		{
			int absorptionDelay = item.stackTagCompound.getInteger("Absorption Delay");
			if (absorptionDelay <= 0) absorptionDelay = 0;
			else absorptionDelay--;
			item.stackTagCompound.setInteger("Absorption Delay", absorptionDelay);
		}
	}

	@SubscribeEvent
	public void onPlayerUpdate(LivingUpdateEvent event)
	{
		if (event.entityLiving instanceof EntityPlayer)
		{
			EntityPlayer player = (EntityPlayer) event.entityLiving;
			boolean resetAbsorption = true;
			absorption = 0;

			for (int i = 1; i <= 4; i++)
			{
				ItemStack item = player.getEquipmentInSlot(i);
				if (item != null && item.getItem() instanceof ItemModArmor)
				{
					if (item.hasTagCompound())
					{
						if (item.stackTagCompound.hasKey("Absorption Delay"))
						{
							if (item.stackTagCompound.getInteger("Absorption Delay") > 0) resetAbsorption = false;
						}
						if (resetAbsorption) absorption += item.stackTagCompound.getInteger("Absorption");
					}
					else onCreated(item, player.worldObj, player);
				}
			}
			PotionEffect potion = player.getActivePotionEffect(Potion.field_76444_x);
			float baseAbsorption = (potion == null) ? 0F : potion.getAmplifier() * 4F;
			float currentAbsorption = player.getAbsorptionAmount();
			player.addChatComponentMessage(new ChatComponentText("Current Absorption: " + currentAbsorption + ", Base Absorption: " + baseAbsorption));
			if (currentAbsorption > baseAbsorption && resetAbsorption) player.setAbsorptionAmount(baseAbsorption + absorption * 2F);
			else if (currentAbsorption <= baseAbsorption && resetAbsorption) player.setAbsorptionAmount(currentAbsorption + absorption * 2F);
		}
	}

	@SubscribeEvent
	public void onLivingHurt(LivingHurtEvent event)
	{
		if (event.entityLiving instanceof EntityPlayer)
		{
			EntityPlayer player = (EntityPlayer) event.entityLiving;
			ItemStack[] equipment = new ItemStack[4];
			for (int i = 0; i < 4; i++)
			{
				equipment[i] = player.getEquipmentInSlot(i + 1);
				if (equipment[i] != null && equipment[i].getItem() instanceof ItemModArmor)
				{
					equipment[i].stackTagCompound.setInteger("Absorption Delay", 200);
				}
			}
			DamageSource source = event.source;
			int protection = getProtection(source, equipment);
			event.ammount *= (1 - protection / 20);
		}
	}

	private int getProtection(DamageSource type, ItemStack[] equipment)
	{
		int totalProtection = 0;
		// int protection, fireProtection, blastProtection,
		// projectileProtection, witherProtection, magicProtection;
		// protection = fireProtection = blastProtection = projectileProtection
		// = witherProtection = magicProtection = 0;
		// for (int i = 0; i < 4; i++)
		// {
		// if (equipment[i] != null && equipment[i].getItem() instanceof
		// ItemModArmor)
		// {
		// protection += equipment[i].stackTagCompound.getInteger("Protection");
		// fireProtection +=
		// equipment[i].stackTagCompound.getInteger("Fire Protection");
		// blastProtection +=
		// equipment[i].stackTagCompound.getInteger("Blast Protection");
		// projectileProtection +=
		// equipment[i].stackTagCompound.getInteger("Projectile Protection");
		// witherProtection +=
		// equipment[i].stackTagCompound.getInteger("Wither Protection");
		// magicProtection +=
		// equipment[i].stackTagCompound.getInteger("Magic Protection");
		// }
		// }
		// if (type.isExplosion()) totalProtection = protection +
		// blastProtection * 2;
		// else if (type.isFireDamage()) totalProtection = protection +
		// fireProtection * 2;
		// else if (type.isProjectile()) totalProtection = protection +
		// projectileProtection * 2;
		// else if (type.isMagicDamage()) totalProtection = protection +
		// magicProtection * 2;
		// else if (type.equals(DamageSource.wither)) totalProtection =
		// protection + witherProtection * 2;
		// else if (type.equals(DamageSource.outOfWorld)) return 0;
		// else if (type.equals(DamageSource.drown)) return 0;
		// else if (type.equals(DamageSource.starve)) return 0;
		return Math.min(totalProtection, 20);
	}

	@Override
	public String getArmorTexture(ItemStack item, Entity entity, int slot, String type)
	{
		if (item.getItem() == ModArmory.infusedHelm || item.getItem() == ModArmory.infusedPlate || item.getItem() == ModArmory.infusedBoots)
		{
			if (item.stackTagCompound.getBoolean("Invisible")) return Reference.MODID + ":models/armor/invis_layer1.png";
			return Reference.MODID + ":models/armor/infused_layer1.png";
		}
		else if (item.getItem() == ModArmory.infusedPants)
		{
			if (item.stackTagCompound.getBoolean("Invisible")) return Reference.MODID + ":models/armor/invis_layer2.png";
			return Reference.MODID + ":models/armor/infused_layer2.png";
		}
		else return null;
	}

	@Override
	public boolean hasEffect(ItemStack par1ItemStack)
	{
		return true;
	}
}