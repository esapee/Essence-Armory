package essenceMod.items.baubles;

import java.util.List;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.passive.EntityAmbientCreature;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.world.World;
import net.minecraftforge.event.entity.living.LivingAttackEvent;
import baubles.api.BaubleType;
import baubles.common.lib.PlayerHandler;

public class ItemCleaveBelt extends ItemBauble
{
	int level;
	
	public ItemCleaveBelt()
	{
		this(0);
	}
	
	public ItemCleaveBelt(int level)
	{
		super();
		this.level = level;
	}
	
	@Override
	public void onCreated(ItemStack item, World world, EntityPlayer player)
	{
		super.onCreated(item, world, player);
		item.stackTagCompound.setInteger("Level", level);
	}
	
	public static int getLevel(ItemStack item)
	{
		return item.stackTagCompound.getInteger("Level");
	}
	
	public static int getRange(ItemStack item)
	{
		return item.stackTagCompound.getInteger("Range");
	}
	
	public static int getPower(ItemStack item)
	{
		return item.stackTagCompound.getInteger("Power");
	}
	
	@Override
	public BaubleType getBaubleType(ItemStack itemstack)
	{
		return BaubleType.BELT;
	}
	
	@Override
	public void addInformation(ItemStack item, EntityPlayer player, List list, boolean bool)
	{
		if (!item.hasTagCompound()) onCreated(item, player.worldObj, player);
		if (item.stackTagCompound.hasKey("Level"))
		{
			list.add("Level: " + item.stackTagCompound.getInteger("Level"));
			list.add("Attacks deal damage to all enemies within " + item.stackTagCompound.getInteger("Level") + " blocks, decreasing based on distance");
		}
	}
	
	public void onLivingAttack(LivingAttackEvent event)
	{
		EntityLivingBase target = event.entityLiving;
		World world = target.worldObj;
		if (event.source.getEntity() instanceof EntityPlayer)
		{
			EntityPlayer attacker = (EntityPlayer) event.source.getEntity();
			ItemStack belt = PlayerHandler.getPlayerBaubles(attacker).getStackInSlot(3);
			if (belt != null && belt.getItem() instanceof ItemCleaveBelt)
			{
				int level = ((ItemCleaveBelt) belt.getItem()).level;
				if (level == 0) return;
				for (int i = 1; i <= level; i++)
				{
					AxisAlignedBB axis = AxisAlignedBB.getBoundingBox(target.posX - i, target.posY - 1, target.posZ - i, target.posX + i, target.posY + 1, target.posZ + i);
					List list = world.getEntitiesWithinAABBExcludingEntity(target, axis);
					for (Object obj : list)
					{
						if (target instanceof EntityMob && obj instanceof EntityMob)
						{
							EntityMob mob = (EntityMob) obj;
							mob.attackEntityFrom(event.source, event.ammount * 0.2F);
						}
						if (target instanceof EntityPlayer && obj instanceof EntityPlayer)
						{
							EntityPlayer player = (EntityPlayer) obj;
							if (player.equals(attacker)) continue;
							player.attackEntityFrom(event.source, event.ammount * 0.2F);
						}
						if (target instanceof EntityAmbientCreature)
						{
							EntityAmbientCreature animal = (EntityAmbientCreature) obj;
							animal.attackEntityFrom(event.source, event.ammount * 0.2F);
						}
					}
				}
			}
		}
	}
}
